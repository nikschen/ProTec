 echo "php_self";
 echo time();
echo $_SERVER['PHP_SELF'];
echo "<br>";
echo $_SERVER['SERVER_NAME'];
echo "<br>";
echo $_SERVER['HTTP_HOST'];
echo "<br>";
echo $_SERVER['HTTP_REFERER'];
echo "<br>";
echo $_SERVER['HTTP_USER_AGENT'];
echo "<br>";
echo $_SERVER['SCRIPT_NAME'];


eventuell am Ende dann:

<p>Alle Preise inkl. Mwst. zzgl. Versandkosten und Nachnahmegebühren (bei Auswahl)</p>




Für Header das LogoProtecTransparent
<img id="slide" src="src/images/LogoProtecTransparent.png" alt="Logo" width="10%" height="10%"  />



.navbar #Login {
    float: left;
    display: block;
    color: #000000;
    text-align: right;
    /*margin-top: 10px;*/
    /* margin-right: 20px;
     */
    /* padding: 14px 16px;*/
    text-decoration: none;
}

.navbar .LoginFields {
    text-align: right;
    /*display: block;*/
    color: rgb(50, 54, 63);
    margin-top: 20px;
    margin-bottom: 5px;
    margin-right: 20px;
    /* padding: 14px 16px;*/
}


<div class="LoginFields">
    <form action="FixedHeader.php">
      <label for="fname">Login:</label>
      <input type="text" id="E-Mail" name="fname" placeholder="Username or E-Mail"><br><br>
      <label for="lname">Password:</label>
      <input type="text" id="Password" name="lname" placeholder="Password"><br><br>
      <button type="submit" id="LoginButton">Login</button> 
  </form> 
    </div>




POST ARRAY im SIGNUP 


    Array
(
    [lastName] => sdfsdf
    [firstName] => Thomas
    [Anrede] => male
    [title] => dfsfsd
    [email] => sdafsd
    [passwort] => sdfsdfg
    [passwort-repeat] => sdgsdg
    [streetinfo] => sdfsfd
    [additionaladdressinfo] => 
    [zipcode] => asdas
    [city] => asda
    [country] => asd
    [submit] => Absenden
)


Altes Insert

public function insert($values, $toBeChanged)
    {
        
        $db=$GLOBALS['db'];
        $columnList='(`';
        $columnList.=implode('`, `', $toBeChanged); //takes values of an array and converts them into string in scheme: "attribute, attribute, attribute, ..."
        $valueList=implode(', ', $values); //takes values of an array and converts them into string in scheme: "Value, Value, Value, ..."
        $columnList.='`)';
        

//        foreach($this->scheme as $key =>$schemeOptions)
//        {
//            $columnList .= '`'.$key.'`,';
//        }
        print_r("valueList: " . $valueList);
        $columnList=trim($columnList,',');

        try 
        {
            $sql='INSERT INTO ' . self::tablename() . $columnList . 'VALUES (' . $valueList . ')';
            print_r("Ihr SQL STATEMENT" . $sql);
            $statement = $db->prepare($sql);
            $statement->execute();
            
            return true;

        }
        catch(\PDOException $e)
        {
            $errors[]='Error inserting '.get_called_class();
        }
        return false;
    }

//zweite Version unserer
      $db = $GLOBALS['db'];
        //print_r("Datenbank: " . $db);
        $tableName = self::tablename();
        print("Tabellenname: " . $tableName) . " ";
        $sqlStr = "INSERT INTO `${tableName}` (";
        $valuesStr = "(";
        foreach($this->scheme as $key => $value)
        {
            $sqlStr.=$key.',';
            $valuesStr.=':'.$key.',';
        }

        $sqlStr = rtrim($sqlStr, ',');
        $valuesStr = rtrim($valuesStr, ',');
       
        
        $sqlStr = $sqlStr.') VALUES '.$valuesStr.');';
        echo "<pre>";
        print_r("SQL: ".$sqlStr . "END SQL STATEMENT");
        echo "</pre>";
        try
        {
            $stmt=$db->prepare($sqlStr);
            $stmt->execute($this->values);
            $this->id = $db->lastInsertId();
        }
        catch(\PDOException $e)
        {
            print_r($e);
        }